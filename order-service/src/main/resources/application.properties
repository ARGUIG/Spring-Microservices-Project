spring.application.name=order-service

## mysql connection
spring.datasource.url=jdbc:mysql://localhost:3306/order_service
spring.datasource.username=root
spring.datasource.password=password

## disable the ddl hibernate handling (for data migration through flyway)
spring.jpa.hibernate.ddl-auto=none

## running this service in another port than 8080
server.port=8081

## this is the URL for the external inventory service
inventory.service.url=http://localhost:8082

## Eureka for service discovery
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.instance.prefer-ip-address=true
spring.cloud.discovery.enabled=true


## Documentation with openAi using swagger http://localhost:8081/swagger-ui.html
springdoc.swagger-ui.path=/swagger-ui.html

## This helpful to see the Documentation in JSON format : http://localhost:8081/api-docs
springdoc.api-docs.path=/api-docs



######### Resilience4j
# Actuator Endpoints
#Enable health indicators for circuit breakers in Spring Boot's health actuator
management.health.circuitbreakers.enabled=true
#Expose all actuator endpoints
management.endpoints.web.exposure.include=*
#Show detailed health information
management.endpoint.health.show-details=always

######### Resilinece4j Properties
# Enable health indicators for circuit breakers
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
# Use count-based sliding window to switch to circuit-breaker
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
# Set the size of the sliding window to 10 calls
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=10
# Set the failure rate threshold to 50%. If 50% of the calls in the sliding window fail, the circuit breaker opens
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# The circuit breaker will stay open for 5 seconds before transitioning to the half-open state
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
# In the half-open state, allow 3 calls to go through to test if the external system is recovered
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
# Enable automatic transition from open to half-open after the wait duration has passed
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true
# Require at least 5 calls in the sliding window to calculate the failure rate (prevents premature decisions)
resilience4j.circuitbreaker.instances.inventory.minimum-number-of-calls=5

###### Resilience4J Timeout Properties : Set a timeout of 3 seconds, If an request takes longer, it is considered a failure
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

####### Resilience4J Retry Properties : Sometimes, the service can be unavailable due to a small network issue, so it's better to retry the call instead of directly activating the Circuit Breaker.
# Retry a failed call up to 3 times
resilience4j.retry.instances.inventory.max-attempts=3
# Wait 2 seconds between each retry attempt
resilience4j.retry.instances.inventory.wait-duration=2s

#Kafka Properties ## Kafka UI : http://localhost:8086/
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=order-placed
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.schema.registry.url=http://localhost:8085


## Grafana
# metrics will be sent in the percentiles histogram format
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=product-service

# generate traces for 100% for all request (by default it is 10%)
management.tracing.sampling.probability=1.0

# Loki URL
loki.url=http://localhost:3100/loki/api/v1/push